{"ast":null,"code":"var _jsxFileName = \"/home/hellal/Documents/Work/Devis/src/Devis.js\";\n// ============================================================\n// Import packages\nimport React from 'react';\nimport { Header, Lot } from './scene';\nimport { Button } from './components';\nimport { URL_DEVIS } from './utils/constants';\n\nclass Devis extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoading: true\n    };\n    this.updateDataToState = this.updateDataToState.bind(this);\n  }\n\n  updateDataToState(data) {\n    const {\n      customerName,\n      customerEmail\n    } = data.deal;\n    const customer = {\n      name: customerName,\n      email: customerEmail\n    };\n    let {\n      address,\n      postalCode,\n      city\n    } = data.deal.chantierAddress;\n    const chantier = {\n      address,\n      postalCode,\n      city\n    };\n    const company = {\n      address: data.company.address,\n      postalCode: data.company.postalCode,\n      city: data.company.city,\n      firstNameRepresentantLegal: data.company.firstNameRepresentantLegal,\n      lastNameRepresentantLegal: data.company.lastNameRepresentantLegal,\n      logoUrl: data.company.logoUrl\n    };\n    const billingAddress = {\n      address: data.deal.billingAddress.address,\n      postalCode: data.deal.billingAddress.postalCode,\n      city: data.deal.billingAddress.city\n    };\n    const lots = data.lots.map(({\n      label,\n      prixTotalTTC,\n      lignes\n    }) => ({\n      label,\n      totalPriceTTC: prixTotalTTC,\n      lignes: getLignes(lignes)\n    }));\n    const locations = getLocations(data);\n    this.setState({\n      isLoading: false,\n      company: company,\n      billingAddress: billingAddress,\n      devisTitle: data.title,\n      chantier: chantier,\n      customer: customer,\n      date: data.date,\n      lots,\n      locations\n    });\n  }\n\n  async componentDidMount() {\n    this.setState({\n      isLoading: true\n    });\n    const reponse = await fetch(URL_DEVIS);\n    const data = await reponse.json();\n    this.updateDataToState(data);\n  }\n\n  render() {\n    if (this.state.isLoading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"onLoading\");\n    }\n\n    console.log('ss', this.state.locations);\n    getxx(this.state.locations, this.state.lots);\n    const lots = this.state.lots.map(({\n      lignes,\n      label,\n      totalPriceTTC\n    }) => React.createElement(Lot, {\n      key: label,\n      lignes: lignes,\n      label: label,\n      totalPriceTTC: totalPriceTTC,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }));\n    const menu = ['par piece', 'par travaux'];\n    return React.createElement(React.Fragment, null, React.createElement(Header, {\n      company: this.state.company,\n      devisTitle: this.state.devisTitle,\n      chantier: this.state.chantier,\n      customer: this.state.customer,\n      date: this.state.date,\n      billingAddress: this.state.billingAddress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(Button, {\n      menuItems: menu,\n      name: \"filtrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), lots);\n  }\n\n} //=====================================================================================\n// Helpers\n\n/**\n * Get all need informations \n * @param {Array} lots \n */\n\n\nfunction getLignes(lignes) {\n  return lignes.map(({\n    designation,\n    description,\n    prixUnitaireHT,\n    unite,\n    quantite,\n    prixHT,\n    tauxTVA,\n    montantTVA,\n    prixTTC,\n    locationsDetails\n  }) => ({\n    locations: locationsDetails.locations.map(location => location.uuid),\n    designation,\n    description,\n    unit_price: prixUnitaireHT,\n    quantite,\n    unite,\n    prixHT,\n    tauxTVA,\n    amountTVA: montantTVA,\n    priceTTC: prixTTC\n  }));\n} // get Locations information \n\n\nfunction getLocations(data) {\n  return data.locations.map(({\n    label,\n    uuid\n  }) => ({\n    label,\n    uuid,\n    lignes: []\n  }));\n}\n\nfunction getxx(locations, lots) {\n  return lots.reduce((acc, curr) => {\n    curr.lignes.map(ligne => ligne.locations.forEach(uuid => {\n      acc.forEach(value => {\n        value.uuid === uuid && value.lignes.push(uuid);\n      });\n    }));\n    return acc;\n  }, locations);\n}\n\nexport default Devis;","map":{"version":3,"sources":["/home/hellal/Documents/Work/Devis/src/Devis.js"],"names":["React","Header","Lot","Button","URL_DEVIS","Devis","Component","constructor","state","isLoading","updateDataToState","bind","data","customerName","customerEmail","deal","customer","name","email","address","postalCode","city","chantierAddress","chantier","company","firstNameRepresentantLegal","lastNameRepresentantLegal","logoUrl","billingAddress","lots","map","label","prixTotalTTC","lignes","totalPriceTTC","getLignes","locations","getLocations","setState","devisTitle","title","date","componentDidMount","reponse","fetch","json","render","console","log","getxx","menu","designation","description","prixUnitaireHT","unite","quantite","prixHT","tauxTVA","montantTVA","prixTTC","locationsDetails","location","uuid","unit_price","amountTVA","priceTTC","reduce","acc","curr","ligne","forEach","value","push"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAAQC,MAAR,EAAgBC,GAAhB,QAA0B,SAA1B;AACA,SAAQC,MAAR,QAAqB,cAArB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAmC;AAC/BC,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAC;AADD,KAAb;AAGA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACH;;AAEDD,EAAAA,iBAAiB,CAACE,IAAD,EAAM;AACnB,UAAM;AAACC,MAAAA,YAAD;AAAeC,MAAAA;AAAf,QAA+BF,IAAI,CAACG,IAA1C;AACA,UAAMC,QAAQ,GAAG;AACbC,MAAAA,IAAI,EAACJ,YADQ;AAEbK,MAAAA,KAAK,EAAEJ;AAFM,KAAjB;AAIA,QAAI;AAACK,MAAAA,OAAD;AAAUC,MAAAA,UAAV;AAAsBC,MAAAA;AAAtB,QAA6BT,IAAI,CAACG,IAAL,CAAUO,eAA3C;AACA,UAAMC,QAAQ,GAAC;AACXJ,MAAAA,OADW;AAEXC,MAAAA,UAFW;AAGXC,MAAAA;AAHW,KAAf;AAKA,UAAMG,OAAO,GAAE;AACbL,MAAAA,OAAO,EAAEP,IAAI,CAACY,OAAL,CAAaL,OADT;AAEbC,MAAAA,UAAU,EAAER,IAAI,CAACY,OAAL,CAAaJ,UAFZ;AAGbC,MAAAA,IAAI,EAAET,IAAI,CAACY,OAAL,CAAaH,IAHN;AAIbI,MAAAA,0BAA0B,EAAEb,IAAI,CAACY,OAAL,CAAaC,0BAJ5B;AAKbC,MAAAA,yBAAyB,EAAEd,IAAI,CAACY,OAAL,CAAaE,yBAL3B;AAMbC,MAAAA,OAAO,EAAGf,IAAI,CAACY,OAAL,CAAaG;AANV,KAAf;AAQA,UAAMC,cAAc,GAAC;AACjBT,MAAAA,OAAO,EAAEP,IAAI,CAACG,IAAL,CAAUa,cAAV,CAAyBT,OADjB;AAEjBC,MAAAA,UAAU,EAAER,IAAI,CAACG,IAAL,CAAUa,cAAV,CAAyBR,UAFpB;AAGjBC,MAAAA,IAAI,EAAET,IAAI,CAACG,IAAL,CAAUa,cAAV,CAAyBP;AAHd,KAArB;AAKA,UAAMQ,IAAI,GAAGjB,IAAI,CAACiB,IAAL,CAAUC,GAAV,CAAc,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,YAAR;AAAsBC,MAAAA;AAAtB,KAAD,MAAkC;AACzDF,MAAAA,KADyD;AAEzDG,MAAAA,aAAa,EAACF,YAF2C;AAGzDC,MAAAA,MAAM,EAAEE,SAAS,CAACF,MAAD;AAHwC,KAAlC,CAAd,CAAb;AAMA,UAAMG,SAAS,GAAGC,YAAY,CAACzB,IAAD,CAA9B;AAEA,SAAK0B,QAAL,CAAc;AACV7B,MAAAA,SAAS,EAAE,KADD;AAEVe,MAAAA,OAAO,EAAEA,OAFC;AAGVI,MAAAA,cAAc,EAAEA,cAHN;AAKVW,MAAAA,UAAU,EAAG3B,IAAI,CAAC4B,KALR;AAMVjB,MAAAA,QAAQ,EAAGA,QAND;AAOVP,MAAAA,QAAQ,EAAEA,QAPA;AAQVyB,MAAAA,IAAI,EAAE7B,IAAI,CAAC6B,IARD;AASVZ,MAAAA,IATU;AAUVO,MAAAA;AAVU,KAAd;AAaH;;AACD,QAAMM,iBAAN,GAAyB;AAErB,SAAKJ,QAAL,CAAc;AAAC7B,MAAAA,SAAS,EAAE;AAAZ,KAAd;AACA,UAAMkC,OAAO,GAAG,MAAMC,KAAK,CAACxC,SAAD,CAA3B;AACA,UAAMQ,IAAI,GAAG,MAAM+B,OAAO,CAACE,IAAR,EAAnB;AACA,SAAKnC,iBAAL,CAAuBE,IAAvB;AAEH;;AACDkC,EAAAA,MAAM,GAAE;AACJ,QAAI,KAAKtC,KAAL,CAAWC,SAAf,EAAyB;AACrB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH;;AACDsC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkB,KAAKxC,KAAL,CAAW4B,SAA7B;AACAa,IAAAA,KAAK,CAAC,KAAKzC,KAAL,CAAW4B,SAAZ,EAAuB,KAAK5B,KAAL,CAAWqB,IAAlC,CAAL;AACA,UAAMA,IAAI,GAAG,KAAKrB,KAAL,CAAWqB,IAAX,CAAgBC,GAAhB,CAAoB,CAAC;AAACG,MAAAA,MAAD;AAAQF,MAAAA,KAAR;AAAcG,MAAAA;AAAd,KAAD,KAC7B,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEH,KAAV;AAAiB,MAAA,MAAM,EAAEE,MAAzB;AAAiC,MAAA,KAAK,EAAEF,KAAxC;AAA+C,MAAA,aAAa,EAAEG,aAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS,CAAb;AAEA,UAAMgB,IAAI,GAAE,CAAC,WAAD,EAAc,aAAd,CAAZ;AACA,WACI,0CACI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAE,KAAK1C,KAAL,CAAWgB,OADxB;AAEI,MAAA,UAAU,EAAE,KAAKhB,KAAL,CAAW+B,UAF3B;AAGI,MAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWe,QAHzB;AAII,MAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWQ,QAJzB;AAKI,MAAA,IAAI,EAAE,KAAKR,KAAL,CAAWiC,IALrB;AAMI,MAAA,cAAc,EAAE,KAAKjC,KAAL,CAAWoB,cAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAQQ,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAEsB,IAAnB;AAAyB,MAAA,IAAI,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARR,EASIrB,IATJ,CADJ;AAaC;;AAtF0B,C,CAwFnC;AACA;;AAEA;;;;;;AAIA,SAASM,SAAT,CAAmBF,MAAnB,EAA0B;AACtB,SAAOA,MAAM,CAACH,GAAP,CAAW,CAAC;AAACqB,IAAAA,WAAD;AAAcC,IAAAA,WAAd;AAA2BC,IAAAA,cAA3B;AAA0CC,IAAAA,KAA1C;AAAiDC,IAAAA,QAAjD;AAA0DC,IAAAA,MAA1D;AAAiEC,IAAAA,OAAjE;AAAyEC,IAAAA,UAAzE;AAAoFC,IAAAA,OAApF;AAA6FC,IAAAA;AAA7F,GAAD,MACf;AACCxB,IAAAA,SAAS,EAAEwB,gBAAgB,CAACxB,SAAjB,CAA2BN,GAA3B,CAA+B+B,QAAQ,IAAIA,QAAQ,CAACC,IAApD,CADZ;AAECX,IAAAA,WAFD;AAGCC,IAAAA,WAHD;AAICW,IAAAA,UAAU,EAACV,cAJZ;AAKCE,IAAAA,QALD;AAMCD,IAAAA,KAND;AAOCE,IAAAA,MAPD;AAQCC,IAAAA,OARD;AASCO,IAAAA,SAAS,EAACN,UATX;AAUCO,IAAAA,QAAQ,EAACN;AAVV,GADe,CAAX,CAAP;AAaH,C,CAED;;;AACA,SAAStB,YAAT,CAAsBzB,IAAtB,EAA2B;AACvB,SAAOA,IAAI,CAACwB,SAAL,CAAeN,GAAf,CAAmB,CAAC;AAACC,IAAAA,KAAD;AAAQ+B,IAAAA;AAAR,GAAD,MAAkB;AACxC/B,IAAAA,KADwC;AAExC+B,IAAAA,IAFwC;AAGxC7B,IAAAA,MAAM,EAAC;AAHiC,GAAlB,CAAnB,CAAP;AAKH;;AAED,SAASgB,KAAT,CAAeb,SAAf,EAAyBP,IAAzB,EAA8B;AAC1B,SAAOA,IAAI,CAACqC,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,KAAa;AAC7BA,IAAAA,IAAI,CAACnC,MAAL,CAAYH,GAAZ,CAAgBuC,KAAK,IACjBA,KAAK,CAACjC,SAAN,CAAgBkC,OAAhB,CAAwBR,IAAI,IAAG;AAC1BK,MAAAA,GAAG,CAACG,OAAJ,CAAYC,KAAK,IAAG;AAChBA,QAAAA,KAAK,CAACT,IAAN,KAAaA,IAAb,IAAqBS,KAAK,CAACtC,MAAN,CAAauC,IAAb,CAAkBV,IAAlB,CAArB;AACC,OAFL;AAGC,KAJN,CADJ;AAMK,WAAOK,GAAP;AACH,GARE,EAQD/B,SARC,CAAP;AAWH;;AAED,eAAe/B,KAAf","sourcesContent":["// ============================================================\n// Import packages\nimport React from 'react';\n\n\nimport {Header, Lot} from './scene';\nimport {Button} from './components';\nimport {URL_DEVIS} from './utils/constants';\n\nclass Devis extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            isLoading:true,\n        }\n        this.updateDataToState = this.updateDataToState.bind(this);\n    }\n    \n    updateDataToState(data){\n        const {customerName, customerEmail}= data.deal;\n        const customer = {\n            name:customerName,\n            email: customerEmail,\n        };\n        let {address, postalCode, city}= data.deal.chantierAddress;\n        const chantier={\n            address,\n            postalCode,\n            city\n        };\n        const company ={\n          address: data.company.address,\n          postalCode: data.company.postalCode,\n          city: data.company.city,\n          firstNameRepresentantLegal: data.company.firstNameRepresentantLegal,\n          lastNameRepresentantLegal: data.company.lastNameRepresentantLegal,\n          logoUrl : data.company.logoUrl,\n        };\n        const billingAddress={\n            address: data.deal.billingAddress.address,\n            postalCode: data.deal.billingAddress.postalCode,\n            city: data.deal.billingAddress.city\n        };\n        const lots = data.lots.map(({label, prixTotalTTC, lignes})=>({\n            label,\n            totalPriceTTC:prixTotalTTC,\n            lignes: getLignes(lignes),\n            \n        }));\n        const locations = getLocations(data);\n        \n        this.setState({ \n            isLoading: false,\n            company: company,\n            billingAddress: billingAddress,\n            \n            devisTitle : data.title,\n            chantier : chantier,\n            customer: customer,\n            date: data.date,\n            lots,\n            locations\n        })\n    \n    }\n    async componentDidMount(){\n        \n        this.setState({isLoading: true});\n        const reponse = await fetch(URL_DEVIS);\n        const data = await reponse.json();\n        this.updateDataToState(data);\n        \n    }\n    render(){\n        if( this.state.isLoading){\n            return <div>onLoading</div>\n        }\n        console.log('ss', this.state.locations)\n        getxx(this.state.locations, this.state.lots);\n        const lots = this.state.lots.map(({lignes,label,totalPriceTTC})=>(\n            <Lot key={label} lignes={lignes} label={label} totalPriceTTC={totalPriceTTC}/>));\n        const menu= ['par piece', 'par travaux'];\n        return (\n            <>\n                <Header \n                    company={this.state.company}\n                    devisTitle={this.state.devisTitle} \n                    chantier={this.state.chantier}\n                    customer={this.state.customer}\n                    date={this.state.date}\n                    billingAddress={this.state.billingAddress}/>\n                    <Button menuItems={menu} name='filtrer'/>\n               {lots}\n            </>\n                )\n        }\n}\n//=====================================================================================\n// Helpers\n\n/**\n * Get all need informations \n * @param {Array} lots \n */\nfunction getLignes(lignes){\n    return lignes.map(({designation, description, prixUnitaireHT,unite, quantite,prixHT,tauxTVA,montantTVA,prixTTC, locationsDetails})=>(\n       {\n        locations: locationsDetails.locations.map(location => location.uuid),\n        designation,\n        description,\n        unit_price:prixUnitaireHT,\n        quantite,\n        unite,\n        prixHT,\n        tauxTVA,\n        amountTVA:montantTVA,\n        priceTTC:prixTTC,\n    }));\n}\n\n// get Locations information \nfunction getLocations(data){\n    return data.locations.map(({label, uuid})=>({\n        label,\n        uuid,\n        lignes:[], \n    }))\n}\n\nfunction getxx(locations,lots){\n    return lots.reduce((acc, curr)=>{\n       curr.lignes.map(ligne=>\n           ligne.locations.forEach(uuid=> {\n                acc.forEach(value=> {\n                    value.uuid===uuid && value.lignes.push(uuid);\n                    });\n                }));\n            return acc\n        },locations)\n       \n    \n}\n\nexport default Devis;"]},"metadata":{},"sourceType":"module"}